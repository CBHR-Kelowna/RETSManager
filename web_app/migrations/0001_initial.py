# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2019-06-21 11:46
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('StreetAddress', models.TextField(blank=True)),
                ('AddressLine1', models.TextField(blank=True)),
                ('AddressLine2', models.TextField(blank=True)),
                ('StreetNumber', models.TextField(blank=True)),
                ('StreetDirectionPrefix', models.TextField(blank=True)),
                ('StreetName', models.TextField(blank=True)),
                ('StreetSuffix', models.TextField(blank=True)),
                ('StreetDirectionSuffix', models.TextField(blank=True)),
                ('UnitNumber', models.TextField(blank=True)),
                ('BoxNumber', models.TextField(blank=True)),
                ('City', models.TextField(blank=True)),
                ('Province', models.TextField(blank=True)),
                ('PostalCode', models.TextField(blank=True)),
                ('Country', models.TextField(blank=True)),
                ('AdditionalStreetInfo', models.TextField(blank=True)),
                ('CommunityName', models.TextField(blank=True)),
                ('Neighbourhood', models.TextField(blank=True)),
                ('Subdivision', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='AgentDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DDF_ID', models.TextField(blank=True, default=None, null=True)),
                ('Name', models.TextField(blank=True)),
                ('LastUpdated', models.TextField(blank=True)),
                ('Position', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='AlternateURL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('BrochureLink', models.TextField(blank=True)),
                ('MapLink', models.TextField(blank=True)),
                ('PhotoLink', models.TextField(blank=True)),
                ('SoundLink', models.TextField(blank=True)),
                ('VideoLink', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('BathroomTotal', models.SmallIntegerField(null=True)),
                ('BedroomsTotal', models.SmallIntegerField(null=True)),
                ('BedroomsAboveGround', models.SmallIntegerField(null=True)),
                ('BedroomsBelowGround', models.SmallIntegerField(null=True)),
                ('Amenities', models.TextField(blank=True)),
                ('Amperage', models.TextField(blank=True)),
                ('Anchor', models.TextField(blank=True)),
                ('Appliances', models.TextField(blank=True)),
                ('ArchitecturalStyle', models.TextField(blank=True)),
                ('BasementDevelopment', models.TextField(blank=True)),
                ('BasementFeatures', models.TextField(blank=True)),
                ('BasementType', models.TextField(blank=True)),
                ('BomaRating', models.TextField(blank=True)),
                ('CeilingHeight', models.TextField(blank=True)),
                ('CeilingType', models.TextField(blank=True)),
                ('ClearCeilingHeight', models.TextField(blank=True)),
                ('ConstructedDate', models.TextField(blank=True)),
                ('ConstructionMaterial', models.TextField(blank=True)),
                ('ConstructionStatus', models.TextField(blank=True)),
                ('ConstructionStyleAttachment', models.TextField(blank=True)),
                ('ConstructionStyleOther', models.TextField(blank=True)),
                ('ConstructionStyleSplitLevel', models.TextField(blank=True)),
                ('CoolingType', models.TextField(blank=True)),
                ('EnerguideRating', models.TextField(blank=True)),
                ('ExteriorFinish', models.TextField(blank=True)),
                ('FireplaceFuel', models.TextField(blank=True)),
                ('FireplacePresent', models.TextField(blank=True)),
                ('FireplaceTotal', models.TextField(blank=True)),
                ('FireplaceType', models.TextField(blank=True)),
                ('FireProtection', models.TextField(blank=True)),
                ('Fixture', models.TextField(blank=True)),
                ('FlooringType', models.TextField(blank=True)),
                ('FoundationType', models.TextField(blank=True)),
                ('HalfBathTotal', models.TextField(blank=True)),
                ('HeatingFuel', models.TextField(blank=True)),
                ('HeatingType', models.TextField(blank=True)),
                ('LeedsCategory', models.TextField(blank=True)),
                ('LeedsRating', models.TextField(blank=True)),
                ('RoofMaterial', models.TextField(blank=True)),
                ('RoofStyle', models.TextField(blank=True)),
                ('SizeExterior', models.TextField(blank=True)),
                ('SizeInterior', models.TextField(blank=True)),
                ('StoreFront', models.TextField(blank=True)),
                ('StoriesTotal', models.TextField(blank=True)),
                ('TotalFinishedArea', models.TextField(blank=True)),
                ('Type', models.TextField(blank=True)),
                ('Uffi', models.TextField(blank=True)),
                ('UtilityPower', models.TextField(blank=True)),
                ('UtilityWater', models.TextField(blank=True)),
                ('VacancyRate', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('BusinessType', models.TextField(blank=True)),
                ('BusinessSubType', models.TextField(blank=True)),
                ('EstablishedDate', models.TextField(blank=True)),
                ('Franchise', models.TextField(blank=True)),
                ('Name', models.TextField(blank=True)),
                ('OperatingSince', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='DDF_LastUpdate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LastUpdate', models.TextField(default='2012-08-08T21:54:28Z')),
                ('UpdateType', models.TextField(default='DDF', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Event', models.TextField(blank=True)),
                ('StartDateTime', models.TextField(blank=True)),
                ('EndDateTime', models.TextField(blank=True)),
                ('Comments', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Failed_Photos_Redownloads',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DDF_ID', models.TextField(blank=True)),
                ('Photo_ID', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Geolocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lng', models.DecimalField(blank=True, decimal_places=14, max_digits=17)),
                ('lat', models.DecimalField(blank=True, decimal_places=14, max_digits=17)),
            ],
        ),
        migrations.CreateModel(
            name='Land',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('SizeTotal', models.TextField(blank=True)),
                ('SizeTotalText', models.TextField(blank=True)),
                ('SizeFrontage', models.TextField(blank=True)),
                ('AccessType', models.TextField(blank=True)),
                ('Acreage', models.TextField(blank=True)),
                ('Amenities', models.TextField(blank=True)),
                ('ClearedTotal', models.TextField(blank=True)),
                ('CurrentUse', models.TextField(blank=True)),
                ('Divisible', models.TextField(blank=True)),
                ('FenceTotal', models.TextField(blank=True)),
                ('FenceType', models.TextField(blank=True)),
                ('FrontsOn', models.TextField(blank=True)),
                ('LandDisposition', models.TextField(blank=True)),
                ('LandscapeFeatures', models.TextField(blank=True)),
                ('PastureTotal', models.TextField(blank=True)),
                ('Sewer', models.TextField(blank=True)),
                ('SizeDepth', models.TextField(blank=True)),
                ('SoilEvaluation', models.TextField(blank=True)),
                ('SoilType', models.TextField(blank=True)),
                ('SurfaceWater', models.TextField(blank=True)),
                ('TiledTotal', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='OfficeDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DDF_ID', models.TextField(blank=True, default=None, null=True)),
                ('Name', models.TextField(blank=True)),
                ('LastUpdated', models.TextField(blank=True)),
                ('LogoLastUpdated', models.TextField(blank=True)),
                ('OrganizationType', models.TextField(blank=True)),
                ('Designation', models.TextField(blank=True)),
                ('Franchisor', models.TextField(blank=True)),
                ('Agent', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Office', to='web_app.AgentDetails')),
            ],
        ),
        migrations.CreateModel(
            name='Parking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.TextField()),
                ('Spaces', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Phone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True)),
                ('ContactType', models.TextField(blank=True)),
                ('PhoneType', models.TextField(blank=True)),
                ('Agent', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Phone', to='web_app.AgentDetails')),
                ('Office', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Phone', to='web_app.OfficeDetails')),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DDF_ID', models.TextField(blank=True, default=None, null=True, unique=True)),
                ('ListingType', models.TextField(default='DDF')),
                ('CreationDate', models.TextField(blank=True)),
                ('LastUpdated', models.TextField()),
                ('ListingID', models.TextField()),
                ('Link', models.TextField(blank=True)),
                ('FullAddress', models.TextField(blank=True, null=True)),
                ('UnitNumber', models.TextField(blank=True, null=True)),
                ('StreetNumber', models.TextField(blank=True, null=True)),
                ('StreetName', models.TextField(blank=True, null=True)),
                ('PostalCode', models.TextField(blank=True, null=True)),
                ('Type', models.TextField(blank=True)),
                ('Multi', models.BooleanField(default=False)),
                ('Status', models.TextField(blank=True, default='active', null=True)),
                ('NextImgId', models.IntegerField(default=1)),
                ('ExpiryDate', models.DateTimeField(blank=True, null=True)),
                ('ReminderCount', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DDF_ID', models.TextField(blank=True, default=None, null=True, unique=True)),
                ('ListingType', models.TextField(default='DDF')),
                ('CreationDate', models.TextField(blank=True)),
                ('LastUpdated', models.TextField(blank=True)),
                ('ListingID', models.TextField()),
                ('Board', models.TextField(blank=True)),
                ('AdditionalInformationIndicator', models.TextField(blank=True)),
                ('AmmenitiesNearBy', models.TextField(blank=True)),
                ('CommunicationType', models.TextField(blank=True)),
                ('CommunityFeatures', models.TextField(blank=True)),
                ('Crop', models.TextField(blank=True)),
                ('DocumentType', models.TextField(blank=True)),
                ('Easement', models.TextField(blank=True)),
                ('EquipmentType', models.TextField(blank=True)),
                ('Features', models.TextField(blank=True)),
                ('FarmType', models.TextField(blank=True)),
                ('IrrigationType', models.TextField(blank=True)),
                ('Lease', models.TextField(blank=True)),
                ('LeasePerTime', models.TextField(blank=True)),
                ('LeasePerUnit', models.TextField(blank=True)),
                ('LeaseTermRemainingFreq', models.TextField(blank=True)),
                ('LeaseTermRemaining', models.TextField(blank=True)),
                ('LeaseType', models.TextField(blank=True)),
                ('ListingContractDate', models.TextField(blank=True)),
                ('LiveStockType', models.TextField(blank=True)),
                ('LoadingType', models.TextField(blank=True)),
                ('LocationDescription', models.TextField(blank=True)),
                ('Machinery', models.TextField(blank=True)),
                ('MaintenanceFee', models.TextField(blank=True)),
                ('MaintenanceFeePaymentUnit', models.TextField(blank=True)),
                ('MaintenanceFeeType', models.TextField(blank=True)),
                ('ManagementCompany', models.TextField(blank=True)),
                ('MoreInformationLink', models.TextField(blank=True)),
                ('MunicipalId', models.TextField(blank=True)),
                ('OwnershipType', models.TextField(blank=True)),
                ('ParkingSpaceTotal', models.TextField(blank=True)),
                ('Plan', models.TextField(blank=True)),
                ('PoolFeatures', models.TextField(blank=True)),
                ('PoolType', models.TextField(blank=True)),
                ('Price', models.TextField(blank=True)),
                ('PricePerUnit', models.TextField(blank=True)),
                ('PropertyType', models.TextField(blank=True)),
                ('PublicRemarks', models.TextField(blank=True)),
                ('RentalEquipmentType', models.TextField(blank=True)),
                ('RightType', models.TextField(blank=True)),
                ('RoadType', models.TextField(blank=True)),
                ('SignType', models.TextField(blank=True)),
                ('StorageType', models.TextField(blank=True)),
                ('Structure', models.TextField(blank=True)),
                ('TransactionType', models.TextField(blank=True)),
                ('TotalBuildings', models.TextField(blank=True)),
                ('ViewType', models.TextField(blank=True)),
                ('WaterFrontType', models.TextField(blank=True)),
                ('WaterFrontName', models.TextField(blank=True)),
                ('ZoningDescription', models.TextField(blank=True)),
                ('ZoningType', models.TextField(blank=True)),
                ('Property', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Info', to='web_app.Property')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyPhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('SequenceId', models.SmallIntegerField()),
                ('LastUpdated', models.TextField(blank=True)),
                ('Description', models.TextField(blank=True)),
                ('Property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Photos', to='web_app.Property')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Type', models.TextField(blank=True)),
                ('Width', models.TextField(blank=True)),
                ('Length', models.TextField(blank=True)),
                ('Level', models.TextField(blank=True)),
                ('Dimension', models.TextField(blank=True)),
                ('Property', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Room', to='web_app.Property')),
            ],
        ),
        migrations.CreateModel(
            name='Utility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Type', models.TextField(blank=True)),
                ('Description', models.TextField(blank=True)),
                ('Property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web_app.Property')),
            ],
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True)),
                ('ContactType', models.TextField(blank=True)),
                ('WebsiteType', models.TextField(blank=True)),
                ('Agent', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='web_app.AgentDetails')),
                ('Office', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='web_app.OfficeDetails')),
            ],
        ),
        migrations.AddField(
            model_name='parking',
            name='Property',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Parking', to='web_app.Property'),
        ),
        migrations.AddField(
            model_name='land',
            name='Property',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='web_app.Property'),
        ),
        migrations.AddField(
            model_name='geolocation',
            name='Property',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Geo', to='web_app.Property'),
        ),
        migrations.AddField(
            model_name='event',
            name='Property',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web_app.Property'),
        ),
        migrations.AddField(
            model_name='business',
            name='Property',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web_app.Property'),
        ),
        migrations.AddField(
            model_name='building',
            name='Property',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Building', to='web_app.Property'),
        ),
        migrations.AddField(
            model_name='alternateurl',
            name='Property',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='web_app.Property'),
        ),
        migrations.AddField(
            model_name='agentdetails',
            name='Property',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Agent', to='web_app.Property'),
        ),
        migrations.AddField(
            model_name='address',
            name='Agent',
            field=models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Address', to='web_app.AgentDetails'),
        ),
        migrations.AddField(
            model_name='address',
            name='Office',
            field=models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Address', to='web_app.OfficeDetails'),
        ),
        migrations.AddField(
            model_name='address',
            name='Property',
            field=models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Address', to='web_app.Property'),
        ),
    ]
